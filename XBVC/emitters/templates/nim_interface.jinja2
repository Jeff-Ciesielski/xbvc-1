import cobs
import bitvec
import options
import threadpool
import tables
import rlocks
import os
import strformat
import queues
import sequtils
import random

const
  ResponsePollMS = 125
  ResponseTimeout = 1000
  MaxPrecision = 8

type
  SplitFloat = object
    sign: uint8
    whole: uint32
    frac: uint32

type
{% for enum in enumerations%}
  {{enum.pascal_name}}* = enum
  {% for val in enum.prefixed_camel_vals%}
    {{val}} = {{loop.index - 1}},
  {% endfor %}

{% endfor %}

  XBVCMessageType* = enum
{% for msg in messages %}
    xm{{msg.pascal_name}} = {{msg.msg_id}},
{% endfor %}

  XBVCMessageBase = object of RootObj

{% for msg in messages %}
  {{msg.pascal_name}}Message* = object of XBVCMessageBase
    {% for m in msg.members %}
      {% if m.d_len == 1 %}
    {{m.camel_name}}*: {{m.nim_d_type}}
      {% else %}
    {{m.camel_name}}*: array[0..{{m.d_len|int - 1}}, {{m.nim_d_type}}]
    {% endif %}
    {% endfor %}
{% endfor %}

  XBVCMessage* = object
    case kind: XBVCMessageType
{% for msg in messages %}
    of xm{{msg.pascal_name}}:
      {{msg.name.lower()}}*: {{msg.pascal_name}}Message
{% endfor %}
    else: discard


proc splitFloat(v: float, precision: int=MaxPrecision): SplitFloat =
  var v = v
  var precision = precision

  result.sign = if v < 0: 1
               else: 0

  v = abs(v)
  result.whole = v.uint32
  v = v - result.whole.float

  precision = max(MaxPrecision, precision)

  var mul = 1
  while precision > 0 and v > 0:
    v *= 10
    let addition = v.uint32 * mul.uint32
    result.frac += addition
    v = v - (v.uint32).float
    dec precision
    mul *= 10

proc combineFloat(s: SplitFloat): float =
  var resultWhole = s.whole.float
  var resultFrac = 0.0
  var s = s

  var mul = 10
  while s.frac > 0.uint32:
    let addition = (s.frac mod 10).float / mul.float
    resultFrac += addition
    s.frac = (s.frac.int / 10.int).uint32
    mul *= 10

  result = resultWhole + resultFrac
  if s.sign == 1:
    result *= -1


proc `==`*[T: ref XBVCMessageBase](a, b: T): bool =
  a[] == b[]


template `$`*[T: ref XBVCMessageBase](a: T): string =
  $a[]

{% for msg in messages %}
proc serialize*(m: {{msg.pascal_name}}Message, rndId, respTo: uint32): seq[byte] =
  var m = m
  m.randomId = rndId
  m.responseTo = respTo
  result = bitvec.encode(xm{{msg.pascal_name}}.uint)
  {% for m in msg.members %}
  {% if m.d_len == 1 %}
    {% if m.d_type == "f32" %}
  let sf{{loop.index}} = splitFloat(m.{{m.camel_name}})
  result &= bitvec.encode(sf{{loop.index}}.sign)
  result &= bitvec.encode(sf{{loop.index}}.whole)
  result &= bitvec.encode(sf{{loop.index}}.frac)
    {% else %}
  result &= bitvec.encode(m.{{m.camel_name}})
    {% endif %}
  {% else %}
  for val in m.{{m.camel_name}}:
    {% if m.d_type == "f32" %}
    let sf{{loop.index}} = splitFloat(val)
    result &= bitvec.encode(sf{{loop.index}}.sign)
    result &= bitvec.encode(sf{{loop.index}}.whole)
    result &= bitvec.encode(sf{{loop.index}}.frac)
    {% else %}
    result &= bitvec.encode(val)
    {% endif %}
  {% endif %}
  {% endfor %}

proc deserialize{{msg.pascal_name}}*(s: seq[byte]): Option[(uint32, {{msg.pascal_name}}Message)] =
  var resObj = {{msg.pascal_name}}Message()
  var rem = @s

  {% for m in msg.members %}
    {% if m.d_type == "f32" %}
  var sf{{loop.index}}: SplitFloat
    {% endif %}
  {% if m.d_len == 1 %}
    {% if m.d_type == "f32" %}
  var decRes{{loop.index}}sign: Option[uint8]
  var decRes{{loop.index}}whole: Option[uint32]
  var decRes{{loop.index}}frac: Option[uint32]
  (decRes{{loop.index}}sign, rem) = bitvec.decode[uint8](rem)
  if decRes{{loop.index}}sign.isNone():
    return
  sf{{loop.index}}.sign = decRes{{loop.index}}sign.get()
  (decRes{{loop.index}}whole, rem) = bitvec.decode[uint32](rem)
  if decRes{{loop.index}}whole.isNone():
    return
  sf{{loop.index}}.whole = decRes{{loop.index}}whole.get()
  (decRes{{loop.index}}frac, rem) = bitvec.decode[uint32](rem)
  if decRes{{loop.index}}frac.isNone():
    return
  sf{{loop.index}}.frac = decRes{{loop.index}}frac.get()
  resObj.{{m.camel_name}} = combineFloat(sf{{loop.index}})
    {% else %}
  var decRes{{loop.index}}: Option[{{m.nim_d_type}}]
  (decRes{{loop.index}}, rem) = bitvec.decode[{{m.nim_d_type}}](rem)
  if decRes{{loop.index}}.isNone():
    return
  resObj.{{m.camel_name}} = decRes{{loop.index}}.get()
    {% endif %}
  {% else %}
  for idx in 0..resObj.{{m.camel_name}}.high:
    {% if m.d_type == "f32" %}
    var decRes{{loop.index}}sign: Option[uint8]
    var decRes{{loop.index}}whole: Option[uint32]
    var decRes{{loop.index}}frac: Option[uint32]      
    (decRes{{loop.index}}sign, rem) = bitvec.decode[uint8](rem)
    if decRes{{loop.index}}sign.isNone():
      return
    (decRes{{loop.index}}whole, rem) = bitvec.decode[uint32](rem)
    if decRes{{loop.index}}whole.isNone():
      return
    (decRes{{loop.index}}frac, rem) = bitvec.decode[uint32](rem)
    if decRes{{loop.index}}frac.isNone():
      return
    sf{{loop.index}}.sign = decRes{{loop.index}}sign.get()
    sf{{loop.index}}.whole = decRes{{loop.index}}whole.get()
    sf{{loop.index}}.frac = decRes{{loop.index}}frac.get()
    resObj.{{m.camel_name}}[idx] = sf{{loop.index}}.combineFloat()
    {% else %}
    var decRes{{loop.index}}: Option[{{m.nim_d_type}}]
    (decRes{{loop.index}}, rem) = bitvec.decode[{{m.nim_d_type}}](rem)
    if decRes{{loop.index}}.isNone():
      return
    resObj.{{m.camel_name}}[idx] = decRes{{loop.index}}.get()
    {% endif %}
  {% endif %}
  {% endfor %}
  result = some((resObj.responseTo, resObj))

{% endfor %}

type
  DispatchError* = ref object of Exception
  DeferredResponse* = ref object of RootObj
    chan: Channel[XBVCMessage]
  XBVCCallback* = proc(msg: XBVCMessage)
  XBVCCallbackTable = Table[XBVCMessageType, XBVCCallback]
  XBVCDispatcher* = object
    callbacks: XBVCCallbackTable
    responseLock: RLock
    responseMap: Table[uint32, DeferredResponse]
    responseChan: Channel[XBVCMessage]
    expectedResponse: Channel[XBVCMessageType]

proc newDeferredResponse*(): DeferredResponse =
  new(result)
  result.chan.open(1)

proc close*(bc: DeferredResponse) =
  bc.chan.close()

proc send(bc: DeferredResponse, msg: XBVCMessage) =
  bc.chan.send(msg)

proc get*(bc: DeferredResponse, timeout: int = ResponseTimeout): Option[XBVCMessage] =
  var
    dataAvailable = false
    response: XBVCMessage
    elapsedTime = 0

  while not dataAvailable and elapsedTime < timeout:
    sleep(ResponsePollMS)
    elapsedTime += ResponsePollMS
    (dataAvailable, response) = bc.chan.tryRecv()

  if not dataAvailable:
    return

  result = some(response)

proc `=destroy`(bc: DeferredResponse) =
  bc.close()

proc newDispatcher*(): XBVCDispatcher =
  result.callbacks = initTable[XBVCMessageType, XBVCCallback]()
  result.responseChan.open()
  result.expectedResponse.open(1)
  initRLock(result.responseLock)
  result.responseMap = initTable[uint32, DeferredResponse]()
  randomize()

proc registerCallback*(ep: var XBVCDispatcher, msgType: XBVCMessageType, cb: XBVCCallback) =
  # TODO: Allow multiple callbacks?  Throw an error? TBD
  ep.callbacks[msgType] = cb

proc decodeMessage(input: seq[byte], msgID: XBVCMessageType): Option[(uint32, XBVCMessage)] =
  var msg: XBVCMessage
  case msgID
{% for msg in messages %}
  of xm{{msg.pascal_name}}:
    let deserializeResult: Option[(uint32, {{msg.pascal_name}}Message)] = input.deserialize{{msg.pascal_name}}()
    if deserializeResult.isNone():
      return
    let (responseTo, innerMsg) = deserializeResult.get()
    msg = XBVCMessage(kind:xm{{msg.pascal_name}}, {{msg.name.lower()}}:innerMsg)
    result = some((responseTo, msg))
{% endfor %}

proc takeUpToZero(s: seq[byte]): (seq[byte], seq[byte]) =
  ## Takes a sequence of bytes, and splits it into (data, rest) where
  ## data includes all the bytes up to and including the first zero,
  ## and rest contains the rest of the input buffer

  var
    head: seq[byte]
    zeroFound: bool = false
    idx: int = 0

  head = @[]

  while not zeroFound and idx < s.len():
    head &= s[idx]
    idx += 1
    if head[^1] == 0.byte:
      zeroFound = true
      break

  if not zeroFound:
    return (@[], s)

  return (head, s[idx.. ^1])

proc dispatch*(ep: var XBVCDispatcher, data: seq[byte]): (Option[DispatchError], seq[byte]) =
  # If there are no sequence terminators, we can just return the
  # entire data packet
  if not any(data, proc (x: byte): bool = return x == 0):
    return (none(DispatchError), data)

  var firstPacket, resBuf: seq[byte]
  (firstPacket, resBuf) = takeUpToZero(data)

  var buf = cobs.decode(firstPacket)
  var msgID: Option[uint32]
  (msgID, buf) = bitvec.decode[uint32](buf)
  if msgID.isNone():
    var err = DispatchError()
    err.msg = "Got corrupt COBS packet"
    return (some(err), resBuf)

  let msgType = msgID.get().XBVCMessageType

  let msgWrapper = decodeMessage(buf, msgType)

  if msgWrapper.isNone():
    var err = DispatchError()
    err.msg = &"Unable to decode message from buffer: {buf}"

    return (some(err), resBuf)

  let (responseTo, msg) = msgWrapper.get()

  withRLock(ep.responseLock):
    if ep.responseMap.contains(responseTo):
      let defResp = ep.responseMap[responseTo]
      defResp.send(msg)
      return (none(DispatchError), resBuf)

  ep.callbacks[msg.kind](msg)
  return (none(DispatchError), resBuf)

proc encode*[T](ep: var XBVCDispatcher, msg: T, responseTo:uint32=0): (uint32, seq[byte]) =
  let rndId = rand(0xffffffff.int).uint32
  result = (rndId, cobs.encode(msg.serialize(rndId, responseTo)))

proc encodeWithResponse*[T](ep: var XBVCDispatcher, msg: T): (seq[byte], uint32, DeferredResponse) =
  var resp = newDeferredResponse()

  let (rndId, data) = ep.encode(msg)
  withRLock(ep.responseLock):
    # TODO: Throw an error if the ID already exists
    ep.responseMap[rndId] = resp

  result = (data, rndId, resp)

when isMainModule:
  let msg = {{messages[0].pascal_name}}Message()
  let serData = msg.serialize{{messages[0].pascal_name}}()
  let desMsg = serData.deserialize{{messages[0].pascal_name}}()
  assert desMsg.isSome()
  assert msg == desMsg.get()
  echo "Sanity Tests Passed"
